// обьекты это всегда хранилище данных, где значения будут в таком синтаксисе: {ключ : значение, ключ : значение, ...}

let user = new Object();                  // и то и другое создаст ноые обьект и поместит его в переменную user
let user = {};                            // первый создан как конструктор обьекта, а второй как литерал обьекта

let user = {                              // при использовании литерального синтаксиса, мы сразу можем в свойство
   name: 'Cristopher',                    //  поместить необходимые значения
   age: 20,
   country: 'USA',
   'current status': 'active'             // имя ключа(свойства) может состоять из неск. слов, но должно быть помещено в кавычки
};

user.age                                  // синтаксис для обращения к свойству в обьекте, по имени ключа
user['current status']                    // если ключ содержит два слова, то к нему необходимо обратиться похожим образом как к массиву

user.isHavPasport = true;                 //так мы можем добавить новый ключ и присвоить ему значение
user['new key value'] = true;             //либо так, если нужно что бы ключ был в виде выражения
let key = 'new key for object';           //мы можем зарание поместить в переменную имя ключа
user[key] = true;                         // и передать эго при создании нового свойства обьекта и будет так же как и user['new key for object'] = true;
user.country = 'Canada';                  // а там мы перезапысываем уже существующее значение

delete user.isHavPasport;                 // через зарезервированое слово delete мы можем удалить нужное значение в обьекте

let user3 = {
   name: 'Yaroslav',
   age: 23,                               // ставить запятую после последнего значение допустимо, и такой подход упрощает
};                                        // добавление, удаление и перемещение свойств в обьекте, так как все становяться одинаковыми

const user4 = {                           // константа защищает саму переменную от измменений, но не её содержимое
   name: 'Vi'
};
user4.name = 'Newvi';                     // поэтому, такое изминение будет коректно

let fruit = prompt('what ...', 'apple');  // мы в переменную задаем вопрос и cтандартное значение
let user4 = {                             // вычесляемые свойства позволяют в ключ передать некие значения при вычеслении
   [fruit]: 5,                            // alert(bag.apple) выведет 5 если пользователь выше введет 'apple'
   [fruit + 'New']: 25                    // этот ключ будет называться как appleNew
};

let user5 = {                             // зарезервированые слова нельзя использовать для имен переменных
   for: 5,                                // но такое правило не распостроняеться на ключи свойств и им можно давать любые имена
   let: "age"
};

let user6 = {};                           //javascript в отличие от многих языков позволяет обращаться даже к несуществующему ключу
alert(user.undefinedKey === undefined)    //result true поскольку такого свойства нету и обьект возвр. undefined
let user7 = {                             // так же для проверки существует специальный оператор in с синтаксисом
   name: 'True',                          // "name of key" in 'name of object'
   status: false
};
alert('name' in user7)                    // result is true поскольку такой ключ есть в(in) обьекте, что указали выше

for (const key in object) {};             // цыкл for..in предназначен для перебора обьектов. В данном случае тело цикла будет выполнено для каждого свойства обьекта

let user8 = {                             // сортировка значений происходит по ключю. Если ключ численный то он сортируеться по увыванию
   '49': 'germany',                       // с другими числами. Остальные ключи сортируються по времени создания 
   // ...,                                // Цельночисленные своства - те что после преобразования не меняют своего значения
   '1' : 'Ucraine'
};
for (const key in user8){
   alert(key);                            // выведет 1,..., 49 поскольку это числа и они сортируються от меньшего к большему
}

Object.keys(user8).length                 //поскольку простым путем не получаеться узнать длину у обьекта, лучше использовать такой способ