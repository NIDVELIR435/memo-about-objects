// обьекты в отличие от примитивных типов данных копируються по ссылке

let user = { name: 'Yaroslav' };
let Admin = user;                                     // теперь у нас есть две переменных, где каждая хранит ссылку на один и тот же обьект

Admin.name = 'Misha';                                 // теперь при обращении и к user.name и к Admin.name мы получим ответ 'Misha'

let user2 = {};                                       // сравнивая такие обьекты мы получим положительный ответ, поскольку js ссылаеться на
let user3 = user2;                                    // один и тот же обьект и он конечно же одинаков, поскольку сравниваеться сам с собой
alert(user2 == user3)
alert(user2 === user3)

let user4 = {};                                       // но если мы создаем отдельно два обьекта, то каждый из них уникален
let user5 = {};                                       // и поэтому они не равны между собой
alert(user4 == user5) // false

// но что если нам нужно сделать независумую копию. JS не имеет встроенную функцию для этого, но методом перебора можно скопировать обьект

let user6 = {                                         // создаем новую переменную с обьектом внутри и параметрами
   name: 'Ivan',                                      
   age: 42
};
let CloneUser6 = {};                                  // создаем переменную с обьектом что примет параметры от выше созданного обьекта
for (let key in user6) {                              // создаем специальный цикл, что переберет все ключи обьекта и присвоит их в новый обьект
   CloneUser6[key] = user6[key];
};
Object.assign(CloneUser6, user6);                     // кроме того есть метод, что делает практически те же действия что и for in , но может перебирать сразу несколько обьектов 
let CloneUser7 = Object.assign({}, user6);            // первый аргумент, это целевой обьект, а далее через запятую, исходные обьекты в любом количистве

